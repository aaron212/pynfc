'''Auto-load of tag modules and instantiation of the relevant tag class.'''# Author: Boris Mazic# Date: 29.05.2012#package rfid.libnfc.modulation.iso14443a.br106.factoryimport sysdef load_module(name):	m = None	try:		module_name = 'rfid.libnfc.modulation.iso14443a.br106.tags.%s' % name		m = __import__(module_name)		m = sys.modules[module_name]		print 'Loaded', module_name	except ImportError as e:		#print module_name + ': {}'.format(e)		pass	return {'name': name, 'module': m}types = {	0x00: load_module("Ultra")	, 0x08: load_module("Classic_1K")	, 0x09: load_module("Classic_MINI")	, 0x18: load_module("Classic_4K")	, 0x20: load_module("DESFire")	, 0x28: load_module("JCOP30")	, 0x38: load_module("JCOP40")	, 0x88: load_module("Oyster")	, 0x98: load_module("Gemplus_MPCOS")}def type(target):	'''returns the specific tag type actually hooked'''	return types.get(target.nti.nai.sak, {'name': 'unknown', 'module': None})def instantiate_tag(reader, target):	module = type(target)['module']	#print dir(module)	clazz = getattr(module, 'Tag')	return clazz(reader, target)